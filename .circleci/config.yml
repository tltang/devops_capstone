version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.0

jobs:
  build:
    docker:
    - image: python:3.7.3-stretch
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
           - v1-dependencies-{{ checksum "requirements.txt" }}
           # fallback to using the latest cache if no exact match is found
           - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 

  build-publish:
    docker:
      - image: cimg/deploy:2022.06.1-node
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build docker image
          command: |
            COMMIT_HASH=$(git log -1 --pretty=%h)
            docker build -t tltang168/helloworld-app:latest -t tltang168/helloworld-app:$COMMIT_HASH .
      - run:
          name: publish docker image to docker hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker image push --all-tags tltang168/helloworld-app

  create-cluster:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/setup
      - run:
          name: Skip create-cluster if cluster << parameters.cluster-name >> exists
          command: |
            if [[ $(eksctl get cluster << parameters.cluster-name >>) ]]
            then
              circleci step halt
            fi
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''

  deploy-application:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      docker-image-name:
        description: |
          Name of the docker image to be deployed
        type: string
      version-info:
        description: |
          App version information
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - checkout
      - run:
          name: Create deployment manifest
          command: |
            BUILD_DATE=$(date '+%Y%m%d%H%M%S')
            cat deployment/helloworld-app-deployment.yaml.template |\
               sed "s|DOCKER_IMAGE_NAME|<< parameters.docker-image-name >>|\
                g;s|BUILD_DATE_VALUE|$BUILD_DATE|g;s|VERSION_INFO_VALUE|\
                << parameters.version-info >>|g" > deployment/helloworld-app-deployment.yaml
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/helloworld-app-deployment.yaml"
          get-rollout-status: true
          resource-name: deployment/helloworldapp
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/helloworld-app-service.yaml"
      - aws-eks/setup
      - run:
          name: Display useful info about the cluster
          command: |
            echo
            echo "Listing cluster info"
            eksctl get cluster
            echo
            echo "Listing deployments"
            kubectl get deployments -o wide
            echo
            echo "Listing services"
            kubectl get services -o wide
            echo
            echo "Listing pods"
            kubectl get pods -o wide

workflows:
  default:
    jobs:
      - build
      - build-publish:
          requires:
            - build
      - create-cluster:
          cluster-name: helloworld-eks
          requires:
            - build-publish
#      - deploy-application:
#          cluster-name: helloworld-eks
#          aws-region: $AWS_DEFAULT_REGION
#          docker-image-name: "tltang168/helloworld-app:latest"
#          version-info: "latest"
#          requires:
#            - create-cluster
